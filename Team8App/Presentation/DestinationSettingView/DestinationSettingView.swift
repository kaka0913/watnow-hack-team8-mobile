import SwiftUI

struct DestinationSettingView: View {
    @State private var viewModel = DestinationSettingViewModel()
    @State private var showStoryRouteView = false
    @Environment(\.dismiss) private var dismiss
    
   var body: some View {
            ZStack {
                Color(red: 1.0, green: 1.0, blue: 0.90)
                    .ignoresSafeArea()
                    .onTapGesture {
                        // „Ç≠„Éº„Éú„Éº„Éâ„ÇíÈñâ„Åò„Çã
                        UIApplication.shared.sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)
                    }
                
                    VStack(spacing: 20) {
                        Spacer().frame(height: 20)
                        
                        // Location Settings Card
                        LocationSettingCard(
                            startLocation: $viewModel.startLocation,
                            destination: $viewModel.destination,
                            destinationPlaceholder: viewModel.destinationPlaceholder,
                            onPlaceSelected: viewModel.updateSelectedPlace,
                            onStartPlaceSelected: viewModel.updateSelectedStartPlace
                        )
                        
                        // Theme Selection Card
                        ThemeSelectionCard(
                            selectedTheme: $viewModel.selectedTheme,
                            showThemeSelection: $viewModel.showThemeSelection,
                            themePlaceholder: viewModel.themePlaceholder,
                            availableThemes: viewModel.availableThemes,
                            onThemeSelect: viewModel.selectTheme
                        )

                        // Search Button -
                        RouteSearchButton(
                            isFormValid: viewModel.isFormValid,
                            isLoading: viewModel.isLoading,
                            onSearchRoute: {
                                Task {
                                    await viewModel.searchRoute()
                                    // „É°„Ç§„É≥„Çπ„É¨„ÉÉ„Éâ„ÅßÁä∂ÊÖãÊõ¥Êñ∞„ÇíÁ¢∫ÂÆü„Å´ÂÆüË°å
                                    await MainActor.run {
                                        print("üîç Ê§úÁ¥¢ÁµêÊûú: \(viewModel.routeProposals.count)‰ª∂")
                                        if viewModel.hasRouteProposals {
                                            print("‚úÖ ÈÅ∑ÁßªÈñãÂßã")
                                            showStoryRouteView = true
                                        } else {
                                            print("‚ùå APIÂ§±Êïó„ÅÆ„Åü„ÇÅ„ÄÅ„É¢„ÉÉ„ÇØ„Éá„Éº„Çø„ÅßÈÅ∑Áßª")
                                            // APIÂ§±ÊïóÊôÇ„Åß„ÇÇStoryRouteView„Å´ÈÅ∑ÁßªÔºà„É¢„ÉÉ„ÇØ„Éá„Éº„Çø„ÇíË°®Á§∫Ôºâ
                                            showStoryRouteView = true
                                        }
                                    }
                                }
                            }
                        )
                        .padding(.top, 40)
                        .padding(.bottom, 20)
                    }
                    .padding(.horizontal, 16)
                }
                .alert("„Ç®„É©„Éº", isPresented: .constant(viewModel.errorMessage != nil)) {
                    Button("OK") {
                        viewModel.clearError()
                    }
                } message: {
                    Text(viewModel.errorMessage ?? "")
                }
                .navigationTitle("ÁõÆÁöÑÂú∞Ë®≠ÂÆö")
                .navigationBarTitleDisplayMode(.inline)
                .navigationBarHidden(false) // ÊòéÁ§∫ÁöÑ„Å´„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„Éê„Éº„ÇíË°®Á§∫
                .toolbar {
                    ToolbarItem(placement: .navigationBarLeading) {
                        HStack {
                            Image(systemName: "location.circle.fill")
                                .foregroundColor(.orange)
                        }
                    }
                }
                .navigationDestination(isPresented: $showStoryRouteView) {
                    StoryRouteView()
                        .onAppear {
                            print("üì± StoryRouteViewË°®Á§∫ÈñãÂßã")
                            // ViewModel„Å´API„Éá„Éº„Çø„ÇíÊ∏°„Åô
                            if !viewModel.routeProposals.isEmpty {
                                print("üîÑ API„Éá„Éº„Çø„ÇíStoryRouteViewModel„Å´Ë®≠ÂÆö: \(viewModel.routeProposals.count)‰ª∂")
                                StoryRouteViewModel.shared.setRouteProposals(viewModel.routeProposals)
                            } else {
                                print("üé≠ „É¢„ÉÉ„ÇØ„Éá„Éº„Çø„Çí‰ΩøÁî®")
                            }
                        }
                }
    }
}
